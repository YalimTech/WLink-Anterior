generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @unique @map("locationId") // GoHighLevel Location ID
  companyId    String?
  firstName    String?   // Campo para el nombre del usuario de GHL
  lastName     String?   // Campo para el apellido del usuario de GHL
  email        String?   // Campo para el email del usuario de GHL
  accessToken  String    @db.Text
  refreshToken String    @db.Text
  tokenExpiresAt DateTime?
  instances    Instance[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt // Es buena práctica tener un campo de actualización

  @@map("users")
}

enum InstanceState {
  notAuthorized
  qr_code
  authorized
  yellowCard
  blocked
  starting
}

model Instance {
  id                BigInt       @id @default(autoincrement())

  /// Nombre de la Instancia (identificador único de Evolution API) - No modificable
  idInstance        String       @unique @db.Text

  /// GUID único generado por Evolution API
  instanceGuid      String?      @unique @db.Text

  /// Nombre o descripción editable por el cliente desde su panel (ej. 'Numero de Servicio al Cliente 1', 'Flota Personal', etc.)
  customName        String?      @map("name") // CAMBIO: Renombrado de 'name' a 'customName' y mapeado a la columna 'name' existente

  apiTokenInstance  String       @db.Text

  /// Estado de conexión (mapeado de "stateInstance")
  state             InstanceState? @map("stateInstance")

  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  settings          Json?        @default("{}") @db.Json
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt // Es buena práctica tener un campo de actualización

  @@index([userId])
}

